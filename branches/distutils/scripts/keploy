#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# keploy - SSH Public Key Deplyment Utility
# Copyright Â© 2007 Greg Swift gregswift@gmail.com
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""
 Import Standard Modules
"""
from optparse import OptionParser, make_option

"""
 Import Local Modules
"""
import keploy as k

"""
 Define Variables
"""
options_list = [
  make_option("-i", dest="id_file",
      help="specifies identity file", default=None),
  make_option("-l", "--login", dest="userid", 
      help="define userid for remote connections", default=None),
  make_option("-f", "--file", dest="target_file",
      help="read list of targets from file", default=None),
  make_option("-k", "--use-known", action="store_true", dest="use_known",
      help="read list of targets from known_hosts files", default=False),
  make_option("-r", "--remove", action="store_true",
      help="remove primary identity from remote(s)", default=False),
  make_option("-c", "--change", dest="old_id_file",
      help="replace old identity with new one on remote(s)", default=False),
  make_option("-A", action="store_true", dest="forward",
      help="enable/disable agent forwarding on remote", default=False),
  make_option("-v", action="store_true", dest="verbose",
      help="give verbose output", default=True),
  make_option("-q", "--quiet", action="store_false", dest="verbose",
      help="quiet the output")
]
#  make_option("-y", action="store_true", dest="accept_unknown",
#      help="accept host key if visiting host for first time", default=False),

"""
 Define Functions
"""
def handler(signum, frame):
  if (signum == 2):
    k.standardOut('Caught interrupt signal, cleaning up...')
  elif (signum == 15):
    k.standardOut('Cleaning up...')
  k.cleanUp(1)

def getOptions(opt_list=options_list, usage='%prog [options] [hosts]',
      version=''):
  """
  Process and return w/ the cli options

  returns dict(options), list(args)
  """
  k.debugOut('getOptions(opt_list=%s, usage=%s, version=%s)' % (opt_list, 
      usage, version))
  p = OptionParser(option_list=opt_list, usage=usage, version=version)
  (options, args) = p.parse_args()
  k.debugOut(options, 'Parsed options are')
  k.debugOut(args, 'Parsed args are')
  return (options, args)

def main():
  # Set the signals which will be handled by the signal handler
  signal.signal(signal.SIGINT, handler)
  signal.signal(signal.SIGTERM, handler)

  # Grap input from cli, and validate it
  (opts, args) = getOptions()
  if (not opts.remove and not opts.old_id_file):
    k.standardOut(pass_warn, opts.verbose)
  k.standardOut('Preparing to deploy ssh key...', opts.verbose)
  if (not opts.userid):
    opts.userid = os.environ['USER']
  opts.userid = '-l %s' % (opts.userid)

  if (len(args) < 1 ):
    if (opts.target_file is not None):
      # Gather up available hosts from supplied file
      (hosts) = k.getHostsFromFile(opts.target_file, verbose=opts.verbose)
      host_msg = '\n\t\t'.join(hosts)
    elif (opts.use_known):
      # Gather up available hosts from known_host files, if we can
      (hosts) = k.getHostsFromFile(known=opts.use_known, verbose=opts.verbose)
      host_msg = '\n\t\t'.join(hosts)
    else:
      k.errorOut("No targets defined.")
  else:
    hosts = args
    host_msg = hosts[0]
  k.standardOut('\tFound host(s):\n\t\t%s' % (host_msg), opts.verbose)

  (identity) = k.getIdentity(opts.id_file, opts.verbose)

  if (opts.old_id_file):
    k.standardOut('\tFinding old public idenity file:', opts.verbose)
    (old_identity) = k.getIdentity(opts.old_id_file, opts.verbose)
    opts.remove = True

"""
 Run application
"""
if __name__ == "__main__":
  vars = k.KeployVariables()
  if (bin is None):
    k.errorOut('Cannot locate ssh binary')
  elif (bin is False):
    k.errorOut('%s is not executable by your user' % (ssh_bin))
  main()
